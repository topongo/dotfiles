(include "host.yuck")
(include "icons.yuck")

(defwindow mainbar [] 
    :monitor 0
    :geometry (geometry
        :x "0%"
        :y "8px"
        :width "100%"
        :height "30px"
        :anchor "top center"
    )
    :stacking "fg"
    :exclusive true
    :reserve (struts :distance "60px" :side "top")
    :windowtype "dock"
    :wm-ignore false
    :class "mainbar"
  (host)
)

(deflisten dyn_workspaces
    :initial "[]"
  "sh scripts/workspaces.sh"
)

(defwidget workspaces []
  (eventbox
      :onscroll "hyprctl dispatch workspace m$([ \"{}\" = \"up\" ] && echo +1 || echo -1)"
    (box
        :class "workspaces widget"
        :space-evenly true
        :halign "start"
      (for entry in dyn_workspaces
        (workspace-button
            :selected {entry["selected"]}
            :index {entry["index"]}
            :name {entry["name"]}
        )
      )
    )
  )
)

(defwidget workspace-button [selected index name]
  (button 
      :class "box${selected ? " box-accent" : ""}"
      :onclick "hyprctl dispatch workspace ${index}"
    name
  )
)

(deflisten dyn_sink_volume :initial "100%"
  "sh scripts/volumectl sink loop"
)

(deflisten dyn_source_volume :initial "100%"
  "sh scripts/volumectl source loop"
)

(defwidget battery []
  (box
      :halign "center"
      :class "widget-nobox battery"
    "${
      icons.battery
        [EWW_BATTERY["BAT0"].status]
        [round(EWW_BATTERY["BAT0"].capacity / 10, 0)]
    }  ${EWW_BATTERY["BAT0"]["capacity"]}%"
  )
)

(defwidget audio []
  (box
      :class "widget audio"
      :space-evenly false
      :halign "end"
    (eventbox 
        :onclick "scripts/volumectl sink mute"
        :onmiddleclick "scripts/volumectl sink cycle"
        :onrightclick "scripts/volumectl sink menu"
        :onscroll "scripts/volumectl sink scroll {}"
      (box :class "box" dyn_sink_volume)
    )
    (eventbox 
        :onclick "scripts/volumectl source mute"
        :onmiddleclick "scripts/volumectl source cycle"
        :onrightclick "scripts/volumectl source menu"
        :onscroll "scripts/volumectl source scroll {}"
      (box :class "box" dyn_source_volume)
    )
  )
)

(defpoll timecolor
    :interval "1s"
    :initial "black"
  "echo black; exit; python scripts/timecolor.py"
)

(defvar clock_hov false)

(defwidget clock []
  (box :class "clock widget-nobox" (eventbox
      :onclick "scripts/clock"
      :halign "center"
      :onhover "${EWW_CMD} update clock_hov=true"
      :onhoverlost "${EWW_CMD} update clock_hov=false"
    {formattime(EWW_TIME, clock_hov ? "%Y/%m/%d %H:%M:%S" : "%m/%d %H:%M")}
  ))
)

(defpoll playing-rs
    :interval "1s"
    :initial "No media"
  "playing-rs status --spaces-after-icon 4"
)

(defpoll playing-rs-url
    :interval "1s"
    :initial ""
  "playing-rs url"
)

(defpoll checkupdates
    :interval "30m"
    :initial "0"
  "checkupdates | wc -l"
)

(defvar media_ctrls false)
(defvar volume 0)
(defvar lyrics-hov false)
(defvar lyrics-lock false)
(deflisten lyrics-content
  "sptlrx pipe"
)

(defpoll player-name
    :interval "1s"
    :initial ""
  "playing-rs player"
)

(deflisten sp-fav 
    :initial false
  "while true; do playing-rs favorite --poll --always; done"
)

(defwidget media []
  (box
      :class "media widget-nobox"
    (eventbox
        :dragvalue playing-rs-url
        :dragtype "text"
        :onhover "${EWW_CMD} update media_ctrls=true"
        :onhoverlost "${EWW_CMD} update media_ctrls=false"
        :onscroll "[ \"{}\" = \"up\" ] && playing-rs operation forward 5 || playing-rs operation rewind 5"
      (box
          :space-evenly false
        (eventbox
            :onclick "playing-rs op toggle"
          "${playing-rs}"
        )
        (revealer
            :reveal {media_ctrls || lyrics-lock}
            :transition "slideleft"
          (box
              :space-evenly false
              :class "media_ctrls"
            (button :onclick "playing-rs op toggle" "󰐍")
            (button :onclick "playing-rs op previous" "󰙤")
            (button :onclick "playing-rs op next" "󰙢")
            (button :onclick "${EWW_CMD} update sp-fav=${sp-fav ? "false" : "true"}; (RES=$(playing-rs favorite); notify-send \"playing-rs\" \"$RES\") &" "${player-name == "Spotify" ? (sp-fav ? "󰥱" : "󰥲") : ""}")
            (eventbox
                :onhover "${EWW_CMD} update lyrics-hov=true"
                :onhoverlost "${EWW_CMD} update lyrics-hov=false"
                :onclick "${EWW_CMD} update lyrics-lock=${lyrics-lock ? "false" : "true"}"
              (box
                  :space-evenly false
                (label :text "${lyrics-lock ? "󰈚" : "󰧭"}" :class "lyrics-button")
                (revealer
                    :reveal {lyrics-hov || lyrics-lock}
                    :transition "slideleft"
                  lyrics-content
                )
              )
            )
          )
        )
      )
    ) 
  )
)

(defwidget stacked_resource [value time-range index name icon ?unit]
  (eventbox
      :onclick "${EWW_CMD} update ${name}_res_index=${(index + 1) % 2}" 
      :onhover "${EWW_CMD} update ${name}_res_exp=true"
      :onhoverlost "${EWW_CMD} update ${name}_res_exp=false"
    (box
        :space-evenly false
        :halign "center"
      (literal :content "(revealer :reveal ${name}_res_exp :duration \"100ms\" :transition \"slideleft\" (label :class \"res_label\" :text \"${icon}\"))")
      (stack
          :class "box box-accent resources"
          :transition "slidedown"
          :selected index
          :same-size true
        (label
            :class "res_metric"
            :text "${
              unit == "<bytes>" ? round(value / (
                log(value + 1, 10) >= 9 ? powi(10, 9) :
                log(value + 1, 10) >= 6 ? powi(10, 6) :
                log(value + 1, 10) >= 3 ? powi(10, 3) :
                1
              ), 1) : round(value, 1)
            }${
              unit == "<bytes>" ? (
                log(value + 1, 10) >= 9 ? "G" :
                log(value + 1, 10) >= 6 ? "M" :
                log(value + 1, 10) >= 3 ? "K" :
                "B"
              ) : unit ?: "%"
            }"
        )
        (graph
            :class "res_graph"
            :style "background-color: none"
            :value value
            :time-range time-range
            :min 0
            :max 100
        )
      )
    )
  )
)


(defvar cpu_res_index 0)
(defvar mem_res_index 0)
(defvar net_up_res_index 0)
(defvar net_dn_res_index 0)
(defvar dis_res_index 0)


(defvar cpu_res_exp false)
(defvar mem_res_exp false)
(defvar net_up_res_exp false)
(defvar net_dn_res_exp false)
(defvar dis_res_exp false)

(defwidget resources []
  (box
      :class "resources widget"
      :space-evenly false 
      :halign "center"
    (stacked_resource
        :value {jq(EWW_CPU, ".cores | map(.usage) | add / length")}
        :time-range "30s"
        :index cpu_res_index
        :name "cpu"
        :icon "${icons.resources.cpu}"
    )
    (stacked_resource
        :value {EWW_RAM.used_mem / EWW_RAM.total_mem * 100}
        :time-range "30s"
        :index mem_res_index
        :name "mem"
        :icon "${icons.resources.mem}"
    )
    (stacked_resource
        :value {EWW_NET[jq(settings, '.network.interfaces[.network.monitor].link', 'r')].NET_UP}
        :time-range "30s"
        :index net_up_res_index
        :name "net_up"
        :unit "<bytes>"
        :icon "${icons.resources.net_up}"
    )
    (stacked_resource
        :value {EWW_NET[jq(settings, '.network.interfaces[.network.monitor].link', "r")].NET_DOWN}
        :time-range "30s"
        :index net_dn_res_index
        :name "net_dn"
        :unit "<bytes>"
        :icon "${icons.resources.net_dn}"
    )
  )
)

(defvar wifi_exp false)

(deflisten wifi_icon 
    :initial "?"
  "sh scripts/wifi_icon.sh"
)

(defpoll wifi_ssid
    :interval "1s"
    :initial "<Disconnected>"
  "bash -c 'nmcli -t -f NAME,TYPE,ACTIVE c | grep \"802-11-wireless:yes$\" | cut -d: -f 1 | (o=$(cat); [ -n \"$o\" ] && echo $o || echo \\<No Connection\\>)'"
)

(defpoll wifi_ip
    :interval "1s"
    :initial ""
  "bash -c 'ip addr show dev $(nmcli -t -f DEVICE,TYPE,ACTIVE c | grep \"802-11-wireless:yes$\" | cut -d: -f 1) | grep -w inet | cut -d\" \" -f 6 | cut -d/ -f 1'"
)

(defvar network-data '{"hover": false}')

(defwidget network-if [if type ?icon]
  (eventbox
      :timeout "1000ms"
      :onhover "echo '${jq(network-data, ".", "r")}' | scripts/net.sh ${if} hover"
      :onmiddleclick "echo | scripts/net.sh ${if} off"
    (box 
        ;; :class "network-if"
        :class "box box-accent network"
        :space-evenly false
      (revealer
          :reveal {network-data.hover == if}
          :duration "300ms"
          :transition "slideleft"
        (label
            :text "${type == "wifi" ? "${wifi_ssid} @ " : ""}${network-data.ifs ?.[if] ?: '<No IP>'}"
        )
      )
      (label
        :class "icon"
        :text "${icon ?: (icons.network[type] ?: icons.network.unknown)}"
      )
    )
  )
)

(defwidget network []
  (eventbox
      :timeout "1000ms"
      :onhoverlost "echo '${jq(network-data, ".", "r")}' | scripts/net.sh '' unhover"
    (box
        :class "widget network"
        :space-evenly false
      (for if in {settings.network.interfaces}
        (network-if :if {if.link} :type {if.type} :icon {if.type == "wifi" ? wifi_icon : ""})
      )
    )
  )
)

(defwidget updates []
  (eventbox
      :onclick "$TERMINAL -e zsh -c 'sudo pacman -Syu' &"
    (box
        :class "widget-nobox updates"
        :style "color: rgb(255, ${255 - checkupdates}, ${255 - checkupdates})"
      "${icons.updates}  ${checkupdates}"
    )
  )
)
